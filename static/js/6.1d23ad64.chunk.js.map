{"version":3,"file":"static/js/6.1d23ad64.chunk.js","mappings":"wRAEaA,EAAeC,EAAAA,GAAAA,IAAH,+FAOZC,EAAQD,EAAAA,GAAAA,MAAH,4TAgBLE,EAAYF,EAAAA,GAAAA,OAAH,6d,SCoDtB,EAtEe,WAAO,IAAD,EACbG,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAC/C,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCF,EAAAA,EAAAA,UAASF,GAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAA0CJ,EAAAA,EAAAA,WAAS,GAAnD,eAAOK,EAAP,KAAsBC,EAAtB,MAEAC,EAAAA,EAAAA,YAAU,WACU,KAAdT,GAAoBO,IACtB,iBAAC,gHAE0BG,EAAAA,EAAAA,IAAiBV,GAF3C,gBAG+B,KADpBW,EAFX,EAEWA,MACCC,QAAQC,QACfC,IAAAA,OAAAA,QACE,oEAGJV,EAAgBO,EAAKC,SARxB,gDAUGG,QAAQC,IAAR,MAVH,wDAAD,GAcFR,GAAiB,EAClB,GAAE,CAACD,EAAeP,IAEnB,IAIMiB,EAAiB,mCAAG,8EACxBlB,EAAgB,CAAEmB,MAAOb,IACzBG,GAAiB,GAFO,2CAAH,qDAKvB,OACE,UAAC,KAAD,YACE,UAACjB,EAAD,YACE,SAACE,EAAD,CAAO0B,MAAOd,EAAce,SAZV,SAAAC,GACtBf,EAAgBe,EAAIC,OAAOH,MAC5B,EAU4DI,KAAK,UAC5D,SAAC7B,EAAD,CACE6B,KAAK,SACLC,QAASP,EACTQ,SAAkC,KAAxBpB,EAAaqB,OAHzB,SAIC,eAIH,SAAC,KAAD,UACGvB,EAAawB,KAAI,SAAAC,GAChB,OACE,SAAC,KAAD,WACE,SAAC,KAAD,CAASC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMrC,GAAnD,UACE,SAAC,KAAD,CACEsC,IACEL,EAAMM,YAAN,6CAC0CN,EAAMM,aADhD,yFAIFC,IAAKP,EAAMQ,WARFR,EAAME,GAaxB,QAIR,C,8LCzEYO,EAAmB,mCAAG,uGAElBC,EAAAA,EAAAA,IACX,4FAH6B,8EAMzB,IAAIC,MAAM,KAAIC,SANW,wDAAH,qDAUnBC,EAAiB,mCAAG,WAAMX,GAAN,0FAEhBQ,EAAAA,EAAAA,IAAA,6CAC2BR,EAD3B,8CAFgB,8EAMvB,IAAIS,MAAM,KAAIC,SANS,wDAAH,sDAUjBE,EAAiB,mCAAG,WAAMZ,GAAN,0FAEhBQ,EAAAA,EAAAA,IAAA,6CAC2BR,EAD3B,sDAFgB,8EAMvB,IAAIS,MAAM,KAAIC,SANS,wDAAH,sDAUjBG,EAAiB,mCAAG,WAAMb,GAAN,0FAEhBQ,EAAAA,EAAAA,IAAA,6CAC2BR,EAD3B,sDAFgB,8EAMvB,IAAIS,MAAM,KAAIC,SANS,wDAAH,sDAUjB9B,EAAgB,mCAAG,WAAMQ,GAAN,0FAEfoB,EAAAA,EAAAA,IAAA,0DACwCpB,EADxC,8CAFe,8EAMtB,IAAIqB,MAAM,KAAIC,SANQ,wDAAH,qD","sources":["pages/Movies.styled.js","pages/MoviesPage.jsx","services/theMovieDB-API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const InputWrapper = styled.div`\n  width: 100%;\n  margin-bottom: 16px;\n  display: flex;\n  gap: 8px;\n`;\n\nexport const Input = styled.input`\n  width: calc(100% - 78px);\n  font-size: 18px;\n  padding: 5px;\n  border-radius: 3px;\n  outline: none;\n  border: 1px solid #000;\n  &:focus-visible {\n    border: 1px solid #0070ba;\n    box-shadow: 0 0 2px #0070ba;\n  }\n  @media screen and (min-width: 768px) {\n    width: 338px;\n  }\n`;\n\nexport const SearchBtn = styled.button`\n  width: 70px;\n  font-size: 18px;\n  padding: 5px;\n  cursor: pointer;\n  border: 1px solid #0070ba;\n  background-color: #e8e8e8;\n  color: #0070ba;\n  border-radius: 3px;\n  transition: color 250ms linear, background-color 250ms linear;\n  &:hover {\n    color: #fff;\n    background-color: #0070ba;\n    outline: none;\n  }\n  :disabled {\n    cursor: auto;\n    border: 1px solid #8e8e8e;\n    color: #8e8e8e;\n    background-color: #e8e8e8;\n  }\n`;\n","import Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { NavLink, useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchMovieSearch } from 'services/theMovieDB-API';\nimport { Container, List, ListItem, Image } from './Command.styled';\nimport { Input, InputWrapper, SearchBtn } from './Movies.styled';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryName = searchParams.get('query') ?? '';\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [currentQuery, setCurrentQuery] = useState(queryName);\n  const [loadingMovies, setLoadingMovies] = useState(false);\n\n  useEffect(() => {\n    if (queryName !== '' && loadingMovies)\n      (async () => {\n        try {\n          const { data } = await fetchMovieSearch(queryName);\n          if (data.results.length === 0) {\n            Notiflix.Notify.failure(\n              'There are no movies matching you search query. Please try again.'\n            );\n          }\n          setSearchMovies(data.results);\n        } catch (error) {\n          console.log(error);\n        }\n      })();\n\n    setLoadingMovies(true);\n  }, [loadingMovies, queryName]);\n\n  const updateQueryName = evt => {\n    setCurrentQuery(evt.target.value);\n  };\n\n  const findMoviesByQuery = async () => {\n    setSearchParams({ query: currentQuery });\n    setLoadingMovies(true);\n  };\n\n  return (\n    <Container>\n      <InputWrapper>\n        <Input value={currentQuery} onChange={updateQueryName} type=\"text\" />\n        <SearchBtn\n          type=\"submit\"\n          onClick={findMoviesByQuery}\n          disabled={currentQuery.trim() === ''}\n        >\n          Search\n        </SearchBtn>\n      </InputWrapper>\n      <List>\n        {searchMovies.map(movie => {\n          return (\n            <ListItem key={movie.id}>\n              <NavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n                <Image\n                  src={\n                    movie.poster_path\n                      ? `https://image.tmdb.org/t/p/original${movie.poster_path}`\n                      : `https://icon-library.com/images/no-photo-available-icon/no-photo-available-icon-14.jpg`\n                  }\n                  alt={movie.title}\n                />\n              </NavLink>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Container>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await axios.get(\n      'https://api.themoviedb.org/3/trending/movie/day?api_key=40e15dc62f9875135cfe2bf57a204366'\n    );\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=40e15dc62f9875135cfe2bf57a204366`\n    );\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n\nexport const fetchMovieCredits = async id => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=40e15dc62f9875135cfe2bf57a204366`\n    );\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n\nexport const fetchMovieReviews = async id => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=40e15dc62f9875135cfe2bf57a204366`\n    );\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n\nexport const fetchMovieSearch = async query => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=40e15dc62f9875135cfe2bf57a204366`\n    );\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n"],"names":["InputWrapper","styled","Input","SearchBtn","location","useLocation","useSearchParams","searchParams","setSearchParams","queryName","get","useState","searchMovies","setSearchMovies","currentQuery","setCurrentQuery","loadingMovies","setLoadingMovies","useEffect","fetchMovieSearch","data","results","length","Notiflix","console","log","findMoviesByQuery","query","value","onChange","evt","target","type","onClick","disabled","trim","map","movie","to","id","state","from","src","poster_path","alt","title","fetchTrendingMovies","axios","Error","message","fetchMovieDetails","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}